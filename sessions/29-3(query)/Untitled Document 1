
 1) Author.includes(:books).group(:author_id).count

 2) Author.includes(:books).where(books: { published: true }).count

3) Author.joins("INNER JOIN books ON books.author_id = authors.id AND books.sold_quantity >20")
 
 4) Author.joins(books: :reviews).where("reviews.ratings> 3.5")
 
 5) Book.order(sold_quantity: :desc).limit(10)
 
6) Book.where("created_at > ?", 1.month.ago).order(sold_quantity: :desc).limit(20)
 
7)Book.where("created_at >= ?", 1.week.ago.utc).order(sold_quantity: :desc).limit(10)

 
8)Book.where("created_at > ?", Time.now-1.days).order(sold_quantity: :desc).limit(10)
 
9)Book.joins(:reviews).where("reviews.description like ?", "%nice%")
 
10) Note down difference between joins and includes:

It is important to note that includes and joins have two different use-cases. They might sometimes generate similar queries but in other cases, they will generate totally different queries.

joins on the one hand generate an INNER JOIN database query. Which can be used to query the records with conditions on the joined table. joins does not eager load associated records.

includes use-case, on the other hand, is to eager load associated records and avoid N+1 queries. Rails might use a database join to load the records and their associated records in one go. Or it might fire two queries to fetch all required records. There is no guarantee that it will always do a database JOIN.

11) Try different types of joins:

Active Record provides two finder methods for specifying JOIN clauses on the resulting SQL: joins and left_outer_joins. While joins should be used for INNER JOIN or custom queries, left_outer_joins is used for queries using LEFT OUTER JOIN.

INNER JOIN: The INNER JOIN keyword selects all rows from both the tables as long as the condition satisfies. This keyword will create the result-set by combining all rows from both the tables where the condition satisfies i.e value of the common field will be same.

LEFT JOIN: This join returns all the rows of the table on the left side of the join and matching rows for the table on the right side of join. The rows for which there is no matching row on right side, the result-set will contain null. LEFT JOIN is also known as LEFT OUTER JOIN.

